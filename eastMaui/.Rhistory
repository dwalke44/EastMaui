diverted$E233 = waterInput[233, 3]*nodesInput[161, 2]
diverted$E234 = waterInput[234, 3]*nodesInput[117, 2] + waterInput[235, 3]*nodesInput[150, 3] + waterInput[236, 3]*nodesInput[151, 3] + waterInput[237, 3]*nodesInput[269, 3]
diverted$E235 = waterInput[235, 3]*nodesInput[150, 2]
diverted$E236 = waterInput[236, 3]*nodesInput[151, 2] + waterInput[238, 3]*nodesInput[63, 3]
diverted$E237 = waterInput[237, 3]*nodesInput[269, 2]
diverted$E238 = waterInput[238, 3]*nodesInput[63, 2]
diverted$E239 = waterInput[239, 3]*nodesInput[10, 2] + waterInput[240, 3]*nodesInput[46, 3]
diverted$E240 = waterInput[240, 3]*nodesInput[46, 2] + waterInput[242, 3]*nodesInput[87, 3] + waterInput[243, 3]*nodesInput[124, 3] + waterInput[242, 3]*nodesInput[87, 3] + waterInput[244, 3]*nodesInput[302, 3]
diverted$E241 = waterInput[241, 3]*nodesInput[303, 2]
diverted$E242 = waterInput[242, 3]*nodesInput[87, 2] + waterInput[241, 3]*nodesInput[303, 3] + waterInput[245, 3]*nodesInput[126, 3] + waterInput[246, 3]*nodesInput[105, 3]
diverted$E243 = waterInput[243, 3]*nodesInput[124, 2]
diverted$E244 = waterInput[244, 3]*nodesInput[302, 2]
diverted$E245 = waterInput[245, 3]*nodesInput[126, 2] + waterInput[261, 3]*nodesInput[271, 3] + waterInput[262, 3]*nodesInput[276, 3] + waterInput[263, 3]*nodesInput[210, 3]
diverted$E246 = waterInput[246, 3]*nodesInput[105, 2] + waterInput[258, 3]*nodesInput[209, 3] + waterInput[255, 3]*nodesInput[155, 3]
diverted$E247 = waterInput[247, 3]*nodesInput[46, 2] + waterInput[248, 3]*nodesInput[90, 3] + waterInput[249, 3]*nodesInput[295, 3] + waterInput[251, 3]*nodesInput[118, 3]
diverted$E248 = waterInput[248, 3]*nodesInput[90, 2] + waterInput[250, 3]*nodesInput[301, 3] + waterInput[252, 3]*nodesInput[91, 3]
diverted$E249 = waterInput[249, 3]*nodesInput[295, 2]
diverted$E250 = waterInput[250, 3]*nodesInput[301, 2]
diverted$E251 = waterInput[251, 3]*nodesInput[118, 2]
diverted$E252 = waterInput[252, 3]*nodesInput[91, 2] + waterInput[253, 3]*nodesInput[125, 3]
diverted$E253 = waterInput[253, 3]*nodesInput[125, 2] + waterInput[256, 3]*nodesInput[156, 3] + waterInput[254, 3]*nodesInput[270, 3]
diverted$E254 = waterInput[254, 3]*nodesInput[270, 2]
diverted$E255 = waterInput[255, 3]*nodesInput[155, 2]
diverted$E256 = waterInput[256, 3]*nodesInput[156, 2] + waterInput[257, 3]*nodesInput[160, 3]
diverted$E257 = waterInput[257, 3]*nodesInput[160, 2] + waterInput[267, 3]*nodesInput[64, 3]
diverted$E258 = waterInput[258, 3]*nodesInput[209, 2] + waterInput[259, 3]*nodesInput[153, 3]
diverted$E259 = waterInput[259, 3]*nodesInput[153, 2]
diverted$E260 = waterInput[260, 3]*nodesInput[211, 2] + waterInput[266, 3]*nodesInput[274, 3] + waterInput[264, 3]*nodesInput[273, 3] + waterInput[268, 3]*nodesInput[152, 3]
diverted$E261 = waterInput[261, 3]*nodesInput[271, 2]
diverted$E262 = waterInput[262, 3]*nodesInput[276, 2] + waterInput[265, 3]*nodesInput[272, 3]
diverted$E263 = waterInput[263, 3]*nodesInput[210, 2] + waterInput[270, 3]*nodesInput[275, 3]
diverted$E264 = waterInput[264, 3]*nodesInput[273, 2]
diverted$E265 = waterInput[265, 3]*nodesInput[272, 2]
diverted$E266 = waterInput[266, 3]*nodesInput[274, 2]
diverted$E267 = waterInput[267, 3]*nodesInput[64, 2]
diverted$E268 = waterInput[268, 3]*nodesInput[152, 2] + waterInput[269, 3]*nodesInput[70, 3]
diverted$E269 = waterInput[269, 3]*nodesInput[70, 2]
diverted$E270 = waterInput[270, 3]*nodesInput[275, 2]
# diverted$E271 = 0
diverted$E272 = waterInput[272, 3]*nodesInput[6, 2] + waterInput[273, 3]*nodesInput[82, 3]
diverted$E273 = waterInput[273, 3]*nodesInput[82, 2]
diverted$E274 = waterInput[274, 3]*nodesInput[9, 2] + waterInput[275, 3]*nodesInput[79, 3]
diverted$E275 = waterInput[275, 3]*nodesInput[271, 2] + waterInput[277, 3]*nodesInput[80, 3] + waterInput[276, 3]*nodesInput[127, 3]
diverted$E276 = waterInput[276, 3]*nodesInput[127, 2]
diverted$E277 = waterInput[277, 3]*nodesInput[80, 2]
diverted$E278 = waterInput[278, 3]*nodesInput[0, 2] + waterInput[280, 3]*nodesInput[104, 3]
diverted$E279 =  waterInput[279, 3]*nodesInput[133, 2]
diverted$E280 = waterInput[280, 3]*nodesInput[104, 2]
# diverted$E281 = 0
diverted$E282 = waterInput[282, 3]*nodesInput[1, 2] + waterInput[286, 3]*nodesInput[169, 3]
diverted$E283 = waterInput[283, 3]*nodesInput[304, 2]
diverted$E284 = waterInput[284, 3]*nodesInput[305, 2]
diverted$E285 = waterInput[285, 3]*nodesInput[306, 2]
diverted$E286 = waterInput[286, 3]*nodesInput[169, 2]
diverted$E287 = waterInput[287, 3]*nodesInput[4, 2]
diverted$E288 = waterInput[288, 3]*nodesInput[157, 2] + waterInput[289, 3]*nodesInput[162, 3]
diverted$E289 = waterInput[289, 3]*nodesInput[162, 2] + waterInput[290, 3]*nodesInput[163, 3] + waterInput[291, 3]*nodesInput[163, 3]
diverted$E290 = waterInput[290, 3]*nodesInput[163, 2] + waterInput[292, 3]*nodesInput[189, 3]
diverted$E291 = waterInput[291, 3]*nodesInput[163, 2] + waterInput[293, 3]*nodesInput[219, 3]
diverted$E292 = waterInput[292, 3]*nodesInput[189, 2]
diverted$E293 = waterInput[293, 3]*nodesInput[219, 2]
diverted$E294 = waterInput[294, 3]*nodesInput[5, 2] + waterInput[295, 3]*nodesInput[308, 3]
diverted$E295 = waterInput[295, 3]*nodesInput[308, 2]
diverted$E296 = waterInput[296, 3]*nodesInput[3, 2] + waterInput[297, 3]*nodesInput[84, 3]
diverted$E297 = waterInput[297, 3]*nodesInput[84, 2] + waterInput[298, 3]*nodesInput[213, 3]
diverted$E298 = waterInput[298, 3]*nodesInput[213, 2]
diverted$E299 = waterInput[299, 3]*nodesInput[2, 2] + waterInput[301, 3]*nodesInput[85, 3]
diverted$E300 = waterInput[300, 3]*nodesInput[307, 2]
diverted$E301 = waterInput[301, 3]*nodesInput[307, 2] + waterInput[301, 3]*nodesInput[85, 2]
diverted$E302 = waterInput[302, 3]*nodesInput[99, 2] + waterInput[303, 3]*nodesInput[129, 3]
diverted$E303 = waterInput[303, 3]*nodesInput[129, 2] + waterInput[304, 3]*nodesInput[145, 3]
diverted$E304 = waterInput[304, 3]*nodesInput[145, 2]
diverted$E305 = waterInput[305, 3]*nodesInput[76, 2]
diverted$E306 = waterInput[306, 3]*nodesInput[137, 2] + waterInput[307, 3]*nodesInput[277, 3] + waterInput[308, 3]*nodesInput[65, 3]
diverted$E307 = waterInput[307, 3]*nodesInput[277, 2]
diverted$E308 = waterInput[308, 3]*nodesInput[65, 2]
# -------------------------------------------------------------------
# Save output in dataframe
output.df = as.data.frame(diverted)
# scenario = data.frame(sapply(ls(pattern="^diverted$E[0-9]+$"),get))
return(output.df)
}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(eastMaui)
library(tidyverse)
library(gridExtra)
library(knitr)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
#
watersheds = inputs
watersheds = watersheds[ ,-16]
watershedsWaterInput = watersheds[ ,c(1,2,7)]
waterInput.mat= as.matrix(watershedsWaterInput)
nodes = nodes
# nodes = nodes[ ,c(1, 8:18)]
nodes00 = nodes[1, ]
nodes = nodes[-1, ]
nodes = rbind(nodes, nodes00)
nodes.mat = as.matrix(nodes[ ,-2])
# ----------------------------------------------------------------------------------
# Create nodes.mat for all values = 1
nodes1 = nodes
nodes1[ , c(3:12)] <- 1
# View(nodes1)
nodes1.mat = as.matrix(nodes1[ ,-2])
row.names(nodes1.mat)<- unlist(nodes1[ ,1])
nodes1.mat[ , c(3:11)] = as.numeric(nodes1.mat[ , c(3:11)] )
# View(nodes1.mat)
# ----------------------------------------------------------------------------------
# Create nodes.mat for all values = 0
nodes0 = nodes
nodes0[which(nodes0$NodeType == "MinorDiversion"), c(3:12)] <- 0
nodes0[which(nodes0$NodeType == "MajorDiversion"), c(3:12)] <- 0
nodes0.mat = as.matrix(nodes0[ ,-2])
row.names(nodes0.mat)<-unlist(nodes0[ ,1])
nodes0.mat[ , c(3:11)] = as.numeric(nodes0.mat[ , c(3:11)] )
# View(nodes0.mat)
View(nodes0.mat)
# waterInput = waterInput.mat
scenario.currentw = diversion.fun(nodes.mat, waterInput.mat)
View(nodes
)
nodes = nodes[ ,c(1, 9:18)]
nodes00 = nodes[1, ]
nodes = nodes[-1, ]
nodes = rbind(nodes, nodes00)
nodes.mat = as.matrix(nodes[ ,-2])
nodescurr = nodes
nodescurr = nodes[ ,c(1, 9:18)]
nodes = eastMaui::nodes
nodescurr = nodes[ ,c(1, 9:18)]
nodes = eastMaui::nodes
nodescurr = nodes[ ,c(1, 9:18)]
nodes00 = nodescurr[1, ]
nodes2 = nodes[-1, ]
nodescurr = rbind(nodes2, nodes00)
nodes = eastMaui::nodes
nodescurr = nodes[ ,c(1, 9:18)]
nodes00 = nodescurr[1, ]
nodes2 = nodescurr[-1, ]
nodescurr = rbind(nodes2, nodes00)
nodes.mat = as.matrix(nodescurr[ ,-2])
nodes1 = eastMaui::nodes
nodes1 = nodes1[ ,c(1, 9:18)]
nodes1[ , c(3:12)] <- 1
nodes1.mat = as.matrix(nodes1[ ,-2])
row.names(nodes1.mat)<- unlist(nodes1[ ,1])
nodes1.mat[ , c(3:11)] = as.numeric(nodes1.mat[ , c(3:11)] )
View(nodes1.mat)
View(nodes.mat)
nodes0 = eastMaui::nodes
nodes0 = nodes0[ ,c(1, 9:18)]
nodes0[which(nodes0$NodeType == "MinorDiversion"), c(3:12)] <- 0
nodes0 = eastMaui::nodes
View(nodes0)
s
nodes0 = eastMaui::nodes
nodes0 = nodes0[ ,c(1, 8:18)]
nodes0[which(nodes0$NodeType == "MinorDiversion"), c(3:12)] <- 0
nodes0[which(nodes0$NodeType == "MajorDiversion"), c(3:12)] <- 0
nodes0.mat = as.matrix(nodes0[ ,-2])
row.names(nodes0.mat)<-unlist(nodes0[ ,1])
nodes0.mat[ , c(3:11)] = as.numeric(nodes0.mat[ , c(3:11)] )
path0 = paste(path, 'Catch2WshedWorkCopy.xlsx', sep = "")
basins = read_excel(path0, sheet = 3)
library(readxl)
library(tidyverse)
path = "~/Programming/Trutta/HSHEP/EMaui/"
path0 = paste(path, 'Catch2WshedWorkCopy.xlsx', sep = "")
basins = read_excel(path0, sheet = 3)
inputs = read_excel(path0, sheet = 3)
dev.tools::use_data(inputs)
devtools::use_data(inputs)
devtools::use_data(inputs, overwrite = TRUE)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(eastMaui)
library(tidyverse)
library(gridExtra)
library(knitr)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
#
watersheds = inputs
watersheds = watersheds[ ,-16]
watershedsWaterInput = watersheds[ ,c(1,2,7)]
waterInput.mat= as.matrix(watershedsWaterInput)
nodes = eastMaui::nodes
nodescurr = nodes[ ,c(1, 9:18)]
nodes00 = nodescurr[1, ]
nodes2 = nodescurr[-1, ]
nodescurr = rbind(nodes2, nodes00)
nodes.mat = as.matrix(nodescurr[ ,-2])
# ----------------------------------------------------------------------------------
# Create nodes.mat for all values = 1
nodes1 = eastMaui::nodes
nodes1 = nodes1[ ,c(1, 9:18)]
nodes1[ , c(3:12)] <- 1
# View(nodes1)
nodes1.mat = as.matrix(nodes1[ ,-2])
row.names(nodes1.mat)<- unlist(nodes1[ ,1])
nodes1.mat[ , c(3:11)] = as.numeric(nodes1.mat[ , c(3:11)] )
# View(nodes1.mat)
# ----------------------------------------------------------------------------------
# Create nodes.mat for all values = 0
nodes0 = eastMaui::nodes
nodes0 = nodes0[ ,c(1, 8:18)]
nodes0[which(nodes0$NodeType == "MinorDiversion"), c(3:12)] <- 0
nodes0[which(nodes0$NodeType == "MajorDiversion"), c(3:12)] <- 0
nodes0.mat = as.matrix(nodes0[ ,-2])
row.names(nodes0.mat)<-unlist(nodes0[ ,1])
nodes0.mat[ , c(3:11)] = as.numeric(nodes0.mat[ , c(3:11)] )
# View(nodes0.mat)
View(waterInput.mat)
library(eastMaui)
nodes = eastMaui::nodes
View(nodes)
nodes = read_excel(path0, sheet = 4)
library(readxl)
nodes = read_excel(path0, sheet = 4)
library(readxl)
library(tidyverse)
library(eastMaui)
path = "~/Programming/Trutta/HSHEP/EMaui/"
path0 = paste(path, 'Catch2WshedWorkCopy.xlsx', sep = "")
inputs = read_excel(path0, sheet = 3)
devtools::use_data(inputs, overwrite = TRUE)
nodes = read_excel(path0, sheet = 4)
library(readxl)
library(tidyverse)
library(eastMaui)
path = "~/Programming/Trutta/HSHEP/EMaui/"
path0 = paste(path, 'Catch2WshedWorkCopy.xlsx', sep = "")
inputs = read_excel(path0, sheet = 3)
nodes = read_excel(path0, sheet = 4)
bfq = read_excel(paste(path, "EM_BFQ95_BASINS.xlsx", sep = ""))
fixedSinks = read_excel(paste(path, "springs.xls", sep = ""))
View(inputs)
inputs$RainSumMM = bfq$BFQ95
colnames(inputs)[7] = "BFQ95"
devtools::use_data(inputs, overwrite = TRUE)
nodes = read_excel(path0, sheet = 4)
View(nodes)
devtools::use_data(nodes, overwrite = TRUE)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(eastMaui)
library(tidyverse)
library(gridExtra)
library(knitr)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
#
watersheds = inputs
watersheds = watersheds[ ,-16]
watershedsWaterInput = watersheds[ ,c(1,2,7)]
waterInput.mat= as.matrix(watershedsWaterInput)
nodes = eastMaui::nodes
nodescurr = nodes[ ,c(1, 9:18)]
nodes00 = nodescurr[1, ]
nodes2 = nodescurr[-1, ]
nodescurr = rbind(nodes2, nodes00)
nodes.mat = as.matrix(nodescurr[ ,-2])
# ----------------------------------------------------------------------------------
# Create nodes.mat for all values = 1
nodes1 = eastMaui::nodes
nodes1 = nodes1[ ,c(1, 9:18)]
nodes1[ , c(3:12)] <- 1
# View(nodes1)
nodes1.mat = as.matrix(nodes1[ ,-2])
row.names(nodes1.mat)<- unlist(nodes1[ ,1])
nodes1.mat[ , c(3:11)] = as.numeric(nodes1.mat[ , c(3:11)] )
# View(nodes1.mat)
# ----------------------------------------------------------------------------------
# Create nodes.mat for all values = 0
nodes0 = eastMaui::nodes
nodes0 = nodes0[ ,c(1, 8:18)]
nodes0[which(nodes0$NodeType == "MinorDiversion"), c(3:12)] <- 0
nodes0[which(nodes0$NodeType == "MajorDiversion"), c(3:12)] <- 0
nodes0.mat = as.matrix(nodes0[ ,-2])
row.names(nodes0.mat)<-unlist(nodes0[ ,1])
nodes0.mat[ , c(3:11)] = as.numeric(nodes0.mat[ , c(3:11)] )
# View(nodes0.mat)
# waterInput = waterInput.mat
scenario.currentw = diversion.fun(nodes.mat, waterInput.mat)
scenario.1w = diversion.fun(nodes1.mat, waterInput.mat)
scenario.0w = water.fun(nodes0.mat, waterInput.mat)
# --------------------------------------------------------------------------------------------------
# append outputs
scenario.currentw = scenario.currentw[1, ]
scenario.1w = scenario.1w[1,]
scenario.0w = scenario.0w[1,]
scenario.cw = as.data.frame(t(scenario.currentw))
scenario.1tw = as.data.frame(t(scenario.1w))
scenario.0tw = as.data.frame(t(scenario.0w))
scenario.cw = tibble::rownames_to_column(scenario.cw, var = "rowname")
colnames(scenario.cw)[2] = "MixedScen"
scenario.0tw = rownames_to_column(scenario.0tw)
scenario.1tw = rownames_to_column(scenario.1tw, var = "rowname")
colnames(scenario.1tw) = c("rowname", "All_1")
colnames(scenario.0tw) = c("rowname","All_0")
scenario.testw = merge(scenario.cw, scenario.0tw, by = "rowname" ) %>%
left_join(scenario.1tw) %>%
separate(rowname, into = c("E", "Wshed"), sep = "^([E])")
# match basinID to watershed
colnames(scenario.testw)[1] = 'Wshed'
colnames(scenario.testw)[2] = "BASINID"
colnames(scenario.testw)[3] = "mixed"
scenario.testw$BASINID = as.numeric(scenario.testw$BASINID)
scenario.testw$Wshed = as.numeric(scenario.testw$Wshed)
wsheds = watersheds[ ,c(1,2)]
scenario.testw = left_join(scenario.testw, wsheds, by = "BASINID")
scenario.testw = scenario.testw[ ,-1]
scenario.testw = scenario.testw[ ,c(5,1:4)]
# generate new ID variables
scenario.testw$IDx1 = sample(1:3, nrow(scenario.testw), replace = TRUE)
scenario.testw$IDx2 = sample(1:5, nrow(scenario.testw), replace = TRUE)
scenario.testw = scenario.testw[ ,c(1:2,6:7, 3:5)]
View(nodes)
View(nodes.mat)
nodes = eastMaui::nodes
View(nodes)
path = "~/Programming/Trutta/HSHEP/EMaui/EMpackage/eastMaui/rawData"
library(readxl)
library(tidyverse)
library(eastMaui)
inputs = read_excel(paste(path, "/EMauiAllData.xlsx", sep = ""), sheet = 3)
nodes = read_excel(paste(path, "/EMauiAllData.xlsx", sep = ""), sheet = 4)
bfq = read_excel(paste(path, "EM_BFQ95_BASINS.xlsx", sep = ""))
bfq = read_excel("~/Programming/Trutta/HSHEP/Emaui/EM_BFQ95_Basins.xlsx")
bfq = read_excel("~/Programming/Trutta/HSHEP/Emaui/EM_BFQ95_Basins.xlsx")
fixedSinks = read_excel( "~/Programming/Trutta/HSHEP/Emaui/springs.xls")
addDitches = read_excel('~/Programming/Trutta/HSHEP/Emaui/fixNodesDitches.xlsx', sheet = 1)
inputs$RainSumMM = bfq$BFQ95
View(inputs)
View(bfq)
path = "~/Programming/Trutta/HSHEP/EMaui/EMpackage/eastMaui/rawData"
inputs = read_excel(paste(path, "/EMauiAllData.xlsx", sep = ""), sheet = 3)
nodes = read_excel(paste(path, "/EMauiAllData.xlsx", sep = ""), sheet = 4)
View(inputs)
View(nodes)
devtools::use_data(inputs, overwrite = TRUE)
devtools::use_data(nodes, overwrite = TRUE)
library(readxl)
library(tidyverse)
library(eastMaui)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(eastMaui)
library(tidyverse)
library(gridExtra)
library(knitr)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
#
watersheds = inputs
watersheds = watersheds[ ,-16]
watershedsWaterInput = watersheds[ ,c(1,2,7)]
waterInput.mat= as.matrix(watershedsWaterInput)
nodes = eastMaui::nodes
nodescurr = nodes[ ,c(1, 9:18)]
nodes00 = nodescurr[1, ]
nodes2 = nodescurr[-1, ]
nodescurr = rbind(nodes2, nodes00)
nodes.mat = as.matrix(nodescurr[ ,-2])
# ----------------------------------------------------------------------------------
# Create nodes.mat for all values = 1
nodes1 = eastMaui::nodes
nodes1 = nodes1[ ,c(1, 9:18)]
nodes1[ , c(3:12)] <- 1
# View(nodes1)
nodes1.mat = as.matrix(nodes1[ ,-2])
row.names(nodes1.mat)<- unlist(nodes1[ ,1])
nodes1.mat[ , c(3:11)] = as.numeric(nodes1.mat[ , c(3:11)] )
# View(nodes1.mat)
# ----------------------------------------------------------------------------------
# Create nodes.mat for all values = 0
nodes0 = eastMaui::nodes
nodes0 = nodes0[ ,c(1, 8:18)]
nodes0[which(nodes0$NodeType == "MinorDiversion"), c(3:12)] <- 0
nodes0[which(nodes0$NodeType == "MajorDiversion"), c(3:12)] <- 0
nodes0.mat = as.matrix(nodes0[ ,-2])
row.names(nodes0.mat)<-unlist(nodes0[ ,1])
nodes0.mat[ , c(3:11)] = as.numeric(nodes0.mat[ , c(3:11)] )
# View(nodes0.mat)
# waterInput = waterInput.mat
scenario.currentw = diversion.fun(nodes.mat, waterInput.mat)
scenario.1w = diversion.fun(nodes1.mat, waterInput.mat)
scenario.0w = water.fun(nodes0.mat, waterInput.mat)
# --------------------------------------------------------------------------------------------------
# append outputs
scenario.currentw = scenario.currentw[1, ]
scenario.1w = scenario.1w[1,]
scenario.0w = scenario.0w[1,]
scenario.cw = as.data.frame(t(scenario.currentw))
scenario.1tw = as.data.frame(t(scenario.1w))
scenario.0tw = as.data.frame(t(scenario.0w))
scenario.cw = tibble::rownames_to_column(scenario.cw, var = "rowname")
colnames(scenario.cw)[2] = "MixedScen"
scenario.0tw = rownames_to_column(scenario.0tw)
scenario.1tw = rownames_to_column(scenario.1tw, var = "rowname")
colnames(scenario.1tw) = c("rowname", "All_1")
colnames(scenario.0tw) = c("rowname","All_0")
scenario.testw = merge(scenario.cw, scenario.0tw, by = "rowname" ) %>%
left_join(scenario.1tw) %>%
separate(rowname, into = c("E", "Wshed"), sep = "^([E])")
# match basinID to watershed
colnames(scenario.testw)[1] = 'Wshed'
colnames(scenario.testw)[2] = "BASINID"
colnames(scenario.testw)[3] = "mixed"
scenario.testw$BASINID = as.numeric(scenario.testw$BASINID)
scenario.testw$Wshed = as.numeric(scenario.testw$Wshed)
wsheds = watersheds[ ,c(1,2)]
scenario.testw = left_join(scenario.testw, wsheds, by = "BASINID")
scenario.testw = scenario.testw[ ,-1]
scenario.testw = scenario.testw[ ,c(5,1:4)]
# generate new ID variables
scenario.testw$IDx1 = sample(1:3, nrow(scenario.testw), replace = TRUE)
scenario.testw$IDx2 = sample(1:5, nrow(scenario.testw), replace = TRUE)
scenario.testw = scenario.testw[ ,c(1:2,6:7, 3:5)]
# output = summary of water by watershed
outputw = scenario.testw %>%
group_by(WshedID) %>%      #LINE to change GROUP ID var
summarise_at(vars(mixed:All_1), sum)
# *******************************************
# calculate percent change from output
label = outputw[ ,1]
All0 = outputw[ ,3]
colnames(All0)[1] = "All0"
percentChangeMixed = ((outputw[ ,c(2)]- outputw[ ,c(3)])/outputw[ ,c(3)])*100
percentChangeAll1 = ((outputw[ ,c(4)]- outputw[ ,c(3)])/outputw[ ,c(3)])*100
scenario.changesw = bind_cols(label,All0,percentChangeMixed, percentChangeAll1)
scenario.changesw[is.na(scenario.changesw)]<- 0
colnames(scenario.changesw)[3]<- c("pChangeMixed")
colnames(scenario.changesw)[4]<- c("pChangeAll1")
# *******************************************
# summaries by watersheds
Wshed = c(1:n_distinct(scenario.changesw))
totalDiv.All0 = rowSums(All0)
totalDiv.All0[is.na(totalDiv.All0)]<- 0
totalDiv.mixed = rowSums(outputw[ ,c(2)])
totalDiv.mixed[is.na(totalDiv.mixed)]<- 0
totalDiv.All1 = rowSums(outputw[ ,c(4)])
totalDiv.All1[is.na(totalDiv.All1)]<- 0
Wshed.outw = data.frame(Wshed, totalDiv.All0, totalDiv.mixed, totalDiv.All1)
Wshed.outw$percentDelta.Mixed = ((Wshed.outw[, 3]-Wshed.outw[ ,2])/Wshed.outw[,2])*100
Wshed.outw$percentDelta.Mixed[is.na(Wshed.outw$percentDelta.Mixed)]<- 0
Wshed.outw$percentDelta1 = ((Wshed.outw[, 4]-Wshed.outw[ ,2])/Wshed.outw[,2])*100
Wshed.outw$percentDelta1[is.na(Wshed.outw$percentDelta1)]<- 0
Wshed.outw$percentDelta.Mixed[is.infinite(Wshed.outw$percentDelta.Mixed)]<- 0
Wshed.outw$percentDelta1[is.infinite(Wshed.outw$percentDelta1)]<- 0
# reshape data to plot percent delta
Wshed.outw.long = gather(Wshed.outw, `percentDelta.Mixed`, `percentDelta1`,  key = "NodeValue", value = "PercentChange")
Wshed.outw.long$PercentChange[is.infinite(Wshed.outw.long$PercentChange)]<- 0
Wshed.outw.long$lPercentChange = log(Wshed.outw.long$PercentChange)
Wshed.outw.long$lPercentChange[is.infinite(Wshed.outw.long$lPercentChange)]<- 0
Wshed.outw.long$lPercentChange[is.infinite(Wshed.outw.long$lPercentChange)]<- 0
# barplots
ggplot(Wshed.outw, aes(x = Wshed, y = (totalDiv.All0))) +
geom_bar(stat = 'identity') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(y = "All 0") +
theme_classic()+
ggtitle("Watershed Diversions - Baseline")
ggplot(Wshed.outw.long, aes(x = Wshed, y = PercentChange, fill = NodeValue)) +
geom_bar( stat = 'identity', position = 'dodge') +
ylim(0, 1.2*max(Wshed.outw.long$lPercentChange)) +
labs(y = "PercentChange") +
theme_classic() +
ggtitle("Watershed Diversions - New Scenarios")
# summary table
colnames(Wshed.outw)[2:6] = c("Total Diverted - All 0", "Total Diverted - Mixed", "Total Diverted - All 1", "Percent Change - Mixed", "Percent Change - All 1")
Wshed.outw$`Percent Change - Mixed`= percent(Wshed.outw$`Percent Change - Mixed`)
Wshed.outw$`Percent Change - All 1`= percent(Wshed.outw$`Percent Change - All 1`)
Wshed.outw.tab = kable(Wshed.outw, digits = 1, align = 'c',
caption = "Summary of Water Diversions by Watershed")
Wshed.outw.tab
View(scenario.testw)
scenario.testw = merge(scenario.cw, scenario.0tw, by = "rowname" ) %>%
left_join(scenario.1tw) %>%
separate(rowname, into = c("E", "Wshed"), sep = "^([E])")
View(scenario.testw)
colnames(scenario.testw)[1] = 'Wshed'
colnames(scenario.testw)[2] = "BASINID"
colnames(scenario.testw)[3] = "mixed"
scenario.testw$BASINID = as.numeric(scenario.testw$BASINID)
scenario.testw$Wshed = as.numeric(scenario.testw$Wshed)
wsheds = watersheds[ ,c(1,2)]
scenario.testw = left_join(scenario.testw, wsheds, by = "BASINID")
scenario.testw = scenario.testw[ ,-1]
scenario.testw = scenario.testw[ ,c(5,1:4)]
View(scenario.testw)
View(scenario.currentw)
View(nodes.mat)
path = "~/Programming/Trutta/HSHEP/EMaui/EMpackage/eastMaui/rawData"
inputs = read_excel(paste(path, "/EMauiAllData.xlsx", sep = ""), sheet = 3)
nodes = read_excel(paste(path, "/EMauiAllData.xlsx", sep = ""), sheet = 4)
View(nodes)
nodes = eastMaui::nodes
View(nodes)
path = "~/Programming/Trutta/HSHEP/EMaui/EMpackage/eastMaui/rawData"
inputs = read_excel(paste(path, "/EMauiAllData.xlsx", sep = ""), sheet = 3)
nodes = read_excel(paste(path, "/EMauiAllData.xlsx", sep = ""), sheet = 4)
devtools::use_data(inputs, overwrite = TRUE)
devtools::use_data(nodes, overwrite = TRUE)
